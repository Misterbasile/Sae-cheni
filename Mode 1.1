LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;

ENTITY chenillard_1_1 IS
    PORT (
        CLOCK_50 : IN STD_LOGIC;         -- Horloge 50 MHz
        reset    : IN STD_LOGIC;         -- Bouton de réinitialisation
        speed    : IN STD_LOGIC_VECTOR(1 DOWNTO 0);  -- Sélection de la vitesse (1Hz, 3Hz, 6Hz, 9Hz)
        leds     : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)  -- Sortie vers les LEDs rouges
    );
END ENTITY chenillard_1_1;

ARCHITECTURE behavior OF chenillard_1_1 IS
    -- Déclaration du composant qui génère une horloge lente
    COMPONENT clock_divider
        PORT (
            CLOCK_50 : IN STD_LOGIC;
            reset    : IN STD_LOGIC;
            speed    : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
            clk_out  : OUT STD_LOGIC
        );
    END COMPONENT;

    SIGNAL clk_slow : STD_LOGIC;  -- Signal d'horloge lente
    SIGNAL led_counter : INTEGER RANGE 0 TO 7 := 0;  -- Compteur pour allumer les LEDs une par une

BEGIN
    -- Instanciation du module qui génère l'horloge lente
    clk_div : clock_divider PORT MAP (
        CLOCK_50 => CLOCK_50,
        reset    => reset,
        speed    => speed,
        clk_out  => clk_slow
    );

    -- Processus principal qui fait défiler les LEDs
    PROCESS (clk_slow, reset)
    BEGIN
        IF reset = '1' THEN
            led_counter <= 0;
            leds <= "00000001";  -- Allume la première LED
        ELSIF rising_edge(clk_slow) THEN
            leds <= (OTHERS => '0');  -- Éteint toutes les LEDs
            leds(led_counter) <= '1';  -- Allume seulement la LED correspondant au compteur

            -- Passe à la LED suivante
            led_counter <= (led_counter + 1) MOD 8;  
        END IF;
    END PROCESS;

END ARCHITECTURE behavior;
