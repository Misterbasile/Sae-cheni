LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;

ENTITY mode_2_3 IS
    PORT (
        CLOCK_50 : IN STD_LOGIC;
        reset    : IN STD_LOGIC;
        speed    : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
        HEX0, HEX1, HEX2, HEX3 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0)
    );
END ENTITY mode_2_3;

ARCHITECTURE behavior OF mode_2_3 IS
    COMPONENT clock_divider
        PORT (
            CLOCK_50 : IN STD_LOGIC;
            reset    : IN STD_LOGIC;
            speed    : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
            clk_out  : OUT STD_LOGIC
        );
    END COMPONENT;
    
    SIGNAL clk_slow : STD_LOGIC;
    SIGNAL segment_index : INTEGER RANGE 0 TO 6 := 0;
    SIGNAL display_index : INTEGER RANGE 0 TO 3 := 0;
    TYPE segment_array IS ARRAY (0 TO 6) OF STD_LOGIC_VECTOR(6 DOWNTO 0);
    CONSTANT segment_patterns : segment_array := (
        "0000001", -- Segment a
        "0000010", -- Segment b
        "0000100", -- Segment c
        "0001000", -- Segment d
        "0010000", -- Segment e
        "0100000", -- Segment f
        "1000000"  -- Segment g
    );
BEGIN
    -- Instanciation du diviseur de fréquence
    clk_div : clock_divider PORT MAP (
        CLOCK_50 => CLOCK_50,
        reset    => reset,
        speed    => speed,
        clk_out  => clk_slow
    );
    
    -- Processus pour gérer l'affichage des segments successivement
    PROCESS (clk_slow, reset)
    BEGIN
        IF reset = '1' THEN
            segment_index <= 0;
            display_index <= 0;
            HEX0 <= (OTHERS => '0');
            HEX1 <= (OTHERS => '0');
            HEX2 <= (OTHERS => '0');
            HEX3 <= (OTHERS => '0');
        ELSIF rising_edge(clk_slow) THEN
            HEX0 <= (OTHERS => '0');
            HEX1 <= (OTHERS => '0');
            HEX2 <= (OTHERS => '0');
            HEX3 <= (OTHERS => '0');
            
            CASE display_index IS
                WHEN 0 => HEX0 <= segment_patterns(segment_index);
                WHEN 1 => HEX1 <= segment_patterns(segment_index);
                WHEN 2 => HEX2 <= segment_patterns(segment_index);
                WHEN 3 => HEX3 <= segment_patterns(segment_index);
                WHEN OTHERS => NULL;
            END CASE;
            
            -- Incrémentation des index
            IF segment_index = 6 THEN
                segment_index <= 0;
                IF display_index = 3 THEN
                    display_index <= 0;
                ELSE
                    display_index <= display_index + 1;
                END IF;
            ELSE
                segment_index <= segment_index + 1;
            END IF;
        END IF;
    END PROCESS;

END ARCHITECTURE behavior;
