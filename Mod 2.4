LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;

ENTITY mode_2_4 IS
    PORT (
        CLOCK_50 : IN STD_LOGIC;
        reset    : IN STD_LOGIC;
        speed    : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
        HEX3, HEX2, HEX1, HEX0 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0)
    );
END ENTITY mode_2_4;

ARCHITECTURE behavior OF mode_2_4 IS
    COMPONENT clock_divider
        PORT (
            CLOCK_50 : IN STD_LOGIC;
            reset    : IN STD_LOGIC;
            speed    : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
            clk_out  : OUT STD_LOGIC
        );
    END COMPONENT;

    SIGNAL clk_slow : STD_LOGIC;
    SIGNAL state : STD_LOGIC := '0';
    
    CONSTANT SEG_2 : STD_LOGIC_VECTOR(6 DOWNTO 0) := "1011011"; -- Affichage du chiffre 2
    CONSTANT SEG_0 : STD_LOGIC_VECTOR(6 DOWNTO 0) := "1111110"; -- Affichage du chiffre 0
    CONSTANT SEG_5 : STD_LOGIC_VECTOR(6 DOWNTO 0) := "1101101"; -- Affichage du chiffre 5
    CONSTANT OFF   : STD_LOGIC_VECTOR(6 DOWNTO 0) := "0000000"; -- Ã‰teint
    
BEGIN
    clk_div : clock_divider PORT MAP (
        CLOCK_50 => CLOCK_50,
        reset    => reset,
        speed    => speed,
        clk_out  => clk_slow
    );

    PROCESS (clk_slow, reset)
    BEGIN
        IF reset = '1' THEN
            state <= '0';
            HEX3 <= OFF;
            HEX2 <= OFF;
            HEX1 <= OFF;
            HEX0 <= OFF;
        ELSIF rising_edge(clk_slow) THEN
            IF state = '0' THEN
                HEX3 <= SEG_2;
                HEX2 <= SEG_0;
                HEX1 <= SEG_2;
                HEX0 <= SEG_5;
                state <= '1';
            ELSE
                HEX3 <= OFF;
                HEX2 <= OFF;
                HEX1 <= OFF;
                HEX0 <= OFF;
                state <= '0';
            END IF;
        END IF;
    END PROCESS;

END ARCHITECTURE behavior;
