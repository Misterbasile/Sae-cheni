LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;

ENTITY chenillard_1_6 IS
    PORT (
        CLOCK_50  : IN STD_LOGIC;        
        reset     : IN STD_LOGIC;        
        speed     : IN STD_LOGIC_VECTOR(1 DOWNTO 0);  
        leds_red  : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);  
        leds_green: OUT STD_LOGIC_VECTOR(7 DOWNTO 0)  
    );
END ENTITY chenillard_1_6;

ARCHITECTURE behavior OF chenillard_1_6 IS
    COMPONENT clock_divider
        PORT (
            CLOCK_50 : IN STD_LOGIC;
            reset    : IN STD_LOGIC;
            speed    : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
            clk_out  : OUT STD_LOGIC
        );
    END COMPONENT;

    SIGNAL clk_slow  : STD_LOGIC;  
    SIGNAL pair_index : INTEGER RANGE 0 TO 3 := 0;  
    SIGNAL direction  : STD_LOGIC := '0';  -- '0' = forward, '1' = reverse

BEGIN
    -- Instanciation du diviseur de fréquence
    clk_div : clock_divider PORT MAP (
        CLOCK_50 => CLOCK_50,
        reset    => reset,
        speed    => speed,
        clk_out  => clk_slow
    );

    -- Processus pour gérer les LEDs vertes par paires avec retour inverse
    PROCESS (clk_slow, reset)
    BEGIN
        IF reset = '1' THEN
            pair_index <= 0;
            direction  <= '0';  -- Début en avant
            leds_red   <= "00000000";  
            leds_green <= "00000011";  -- Paires initiales (0, 1)
        ELSIF rising_edge(clk_slow) THEN
            leds_green <= (OTHERS => '0');  
            leds_green(pair_index)   <= '1';  -- Allume la LED verte
            leds_green(pair_index+1) <= '1';  -- Allume la LED verte suivante

            -- Changement de direction
            IF direction = '0' THEN
                -- Avance vers la droite
                IF pair_index = 3 THEN
                    direction <= '1';  -- Inverse la direction
                    pair_index <= 2;   -- Reste sur la dernière paire
                ELSE
                    pair_index <= pair_index + 1;
                END IF;
            ELSE
                -- Recul vers la gauche
                IF pair_index = 0 THEN
                    direction <= '0';  -- Recommence vers la droite
                    pair_index <= 1;
                ELSE
                    pair_index <= pair_index - 1;
                END IF;
            END IF;
        END IF;
    END PROCESS;

END ARCHITECTURE behavior;
____
LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;

ENTITY chenillard_1_6 IS
    PORT (
        CLOCK_50  : IN STD_LOGIC;        
        reset     : IN STD_LOGIC;        
        speed     : IN STD_LOGIC_VECTOR(1 DOWNTO 0);  
        enable    : IN STD_LOGIC;  -- Activation du mode
        leds_red  : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);  
        leds_green: OUT STD_LOGIC_VECTOR(7 DOWNTO 0)  
    );
END ENTITY chenillard_1_6;

ARCHITECTURE behavior OF chenillard_1_6 IS
    COMPONENT clock_divider
        PORT (
            CLOCK_50 : IN STD_LOGIC;
            reset    : IN STD_LOGIC;
            speed    : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
            clk_out  : OUT STD_LOGIC
        );
    END COMPONENT;

    SIGNAL clk_slow  : STD_LOGIC;  
    SIGNAL pair_index : INTEGER RANGE 0 TO 3 := 0;  -- Indice des paires de LEDs
    SIGNAL direction  : STD_LOGIC := '0';  -- '0' = avance, '1' = recule

BEGIN
    -- Instanciation du diviseur de fréquence
    clk_div : clock_divider PORT MAP (
        CLOCK_50 => CLOCK_50,
        reset    => reset,
        speed    => speed,
        clk_out  => clk_slow
    );

    -- Processus pour gérer les LEDs vertes par paires avec aller-retour
    PROCESS (clk_slow, reset)
    BEGIN
        IF reset = '1' THEN
            pair_index <= 0;
            direction  <= '0';  -- Commence en avançant
            leds_red   <= "00000000";  
            leds_green <= "00000011";  -- Première paire allumée (LEDs 0 et 1)
        ELSIF rising_edge(clk_slow) THEN
            IF enable = '1' THEN  -- Vérifie si le mode est activé
                leds_green <= (OTHERS => '0');  
                leds_red   <= (OTHERS => '0');  

                -- Active la paire courante
                leds_green(pair_index * 2)   <= '1';
                leds_green(pair_index * 2 + 1) <= '1';

                -- Gestion de l'aller-retour
                IF direction = '0' THEN  -- Avance
                    IF pair_index = 3 THEN
                        direction <= '1';  -- Change de sens
                        pair_index <= 2;   -- Recule d'une position
                    ELSE
                        pair_index <= pair_index + 1;
                    END IF;
                ELSE  -- Recule
                    IF pair_index = 0 THEN
                        direction <= '0';  -- Repart en avant
                        pair_index <= 1;
                    ELSE
                        pair_index <= pair_index - 1;
                    END IF;
                END IF;
            END IF;
        END IF;
    END PROCESS;

END ARCHITECTURE behavior;
