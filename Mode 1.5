LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;

ENTITY chenillard_1_5 IS
    PORT (
        CLOCK_50  : IN STD_LOGIC;        
        reset     : IN STD_LOGIC;        
        speed     : IN STD_LOGIC_VECTOR(1 DOWNTO 0);  
        leds_red  : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);  
        leds_green: OUT STD_LOGIC_VECTOR(7 DOWNTO 0)  
    );
END ENTITY chenillard_1_5;

ARCHITECTURE behavior OF chenillard_1_5 IS
    COMPONENT clock_divider
        PORT (
            CLOCK_50 : IN STD_LOGIC;
            reset    : IN STD_LOGIC;
            speed    : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
            clk_out  : OUT STD_LOGIC
        );
    END COMPONENT;

    SIGNAL clk_slow  : STD_LOGIC;  
    SIGNAL led_counter : INTEGER RANGE 0 TO 6 := 0;  -- Seulement 6 paires
    SIGNAL pair_index  : INTEGER RANGE 0 TO 3 := 0;  -- Paires de LEDs

BEGIN
    -- Instanciation du diviseur de fréquence
    clk_div : clock_divider PORT MAP (
        CLOCK_50 => CLOCK_50,
        reset    => reset,
        speed    => speed,
        clk_out  => clk_slow
    );

    -- Processus pour gérer les LEDs vertes par paires
    PROCESS (clk_slow, reset)
    BEGIN
        IF reset = '1' THEN
            pair_index <= 0;
            leds_red   <= "00000000";  
            leds_green <= "00000011";  -- Paires initiales (0, 1)
        ELSIF rising_edge(clk_slow) THEN
            leds_green <= (OTHERS => '0');  
            leds_green(pair_index)   <= '1';  -- Allume la LED verte
            leds_green(pair_index+1) <= '1';  -- Allume la LED verte suivante

            -- Incrémentation de la paire
            IF pair_index = 3 THEN
                pair_index <= 0;
            ELSE
                pair_index <= pair_index + 1;
            END IF;
        END IF;
    END PROCESS;

END ARCHITECTURE behavior;
