LIBRARY IEEE; USE IEEE.STD_LOGIC_1164.ALL;

ENTITY mode_2_7 IS PORT ( CLOCK_50  : IN STD_LOGIC; reset     : IN STD_LOGIC; speed     : IN STD_LOGIC_VECTOR(1 DOWNTO 0); HEX0, HEX1, HEX2, HEX3 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0) ); END ENTITY mode_2_7;

ARCHITECTURE behavior OF mode_2_7 IS COMPONENT clock_divider PORT ( CLOCK_50 : IN STD_LOGIC; reset    : IN STD_LOGIC; speed    : IN STD_LOGIC_VECTOR(1 DOWNTO 0); clk_out  : OUT STD_LOGIC ); END COMPONENT;

SIGNAL clk_slow : STD_LOGIC;
SIGNAL step_index : INTEGER RANGE 0 TO 7 := 0;
TYPE segment_array IS ARRAY (0 TO 7) OF STD_LOGIC_VECTOR(6 DOWNTO 0);
CONSTANT sequence : segment_array := (
    "0110000",  -- e,f de HEX3
    "0001100",  -- b,c de HEX3
    "0110000",  -- e,f de HEX2
    "0001100",  -- b,c de HEX2
    "0110000",  -- e,f de HEX1
    "0001100",  -- b,c de HEX1
    "0110000",  -- e,f de HEX0
    "0001100"   -- b,c de HEX0
);

BEGIN clk_div : clock_divider PORT MAP ( CLOCK_50 => CLOCK_50, reset    => reset, speed    => speed, clk_out  => clk_slow );

PROCESS (clk_slow, reset)
BEGIN
    IF reset = '1' THEN
        step_index <= 0;
        HEX0 <= "0000000";
        HEX1 <= "0000000";
        HEX2 <= "0000000";
        HEX3 <= "0000000";
    ELSIF rising_edge(clk_slow) THEN
        HEX0 <= "0000000";
        HEX1 <= "0000000";
        HEX2 <= "0000000";
        HEX3 <= "0000000";

        CASE step_index IS
            WHEN 0 => HEX3 <= sequence(0);
            WHEN 1 => HEX3 <= sequence(1);
            WHEN 2 => HEX2 <= sequence(2);
            WHEN 3 => HEX2 <= sequence(3);
            WHEN 4 => HEX1 <= sequence(4);
            WHEN 5 => HEX1 <= sequence(5);
            WHEN 6 => HEX0 <= sequence(6);
            WHEN 7 => HEX0 <= sequence(7);
            WHEN OTHERS => NULL;
        END CASE;

        IF step_index = 7 THEN
            step_index <= 0;
        ELSE
            step_index <= step_index + 1;
        END IF;
    END IF;
END PROCESS;

END ARCHITECTURE behavior;

