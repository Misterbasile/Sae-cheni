LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;

ENTITY mode_2_2 IS
    PORT (
        CLOCK_50 : IN STD_LOGIC;
        reset    : IN STD_LOGIC;
        speed    : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
        HEX3, HEX2, HEX1, HEX0 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0)
    );
END ENTITY mode_2_2;

ARCHITECTURE behavior OF mode_2_2 IS
    COMPONENT clock_divider
        PORT (
            CLOCK_50 : IN STD_LOGIC;
            reset    : IN STD_LOGIC;
            speed    : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
            clk_out  : OUT STD_LOGIC
        );
    END COMPONENT;

    SIGNAL clk_slow : STD_LOGIC;
    SIGNAL segment_index : INTEGER RANGE 0 TO 6 := 0;

BEGIN
    -- Instanciation du diviseur de fréquence
    clk_div : clock_divider PORT MAP (
        CLOCK_50 => CLOCK_50,
        reset    => reset,
        speed    => speed,
        clk_out  => clk_slow
    );

    -- Processus pour gérer l'affichage simultané des segments
    PROCESS (clk_slow, reset)
    BEGIN
        IF reset = '1' THEN
            segment_index <= 0;
            HEX3 <= (OTHERS => '0');
            HEX2 <= (OTHERS => '0');
            HEX1 <= (OTHERS => '0');
            HEX0 <= (OTHERS => '0');
        ELSIF rising_edge(clk_slow) THEN
            HEX3 <= (OTHERS => '0');
            HEX2 <= (OTHERS => '0');
            HEX1 <= (OTHERS => '0');
            HEX0 <= (OTHERS => '0');
            
            HEX3(segment_index) <= '1';
            HEX2(segment_index) <= '1';
            HEX1(segment_index) <= '1';
            HEX0(segment_index) <= '1';

            -- Incrémentation du segment
            IF segment_index = 6 THEN
                segment_index <= 0;
            ELSE
                segment_index <= segment_index + 1;
            END IF;
        END IF;
    END PROCESS;

END ARCHITECTURE behavior;
