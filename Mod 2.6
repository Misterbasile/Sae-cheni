LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
USE IEEE.STD_LOGIC_UNSIGNED.ALL;

ENTITY mode_2_6 IS
    PORT (
        CLOCK_50 : IN STD_LOGIC;
        reset    : IN STD_LOGIC;
        speed    : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
        HEX0, HEX1, HEX2, HEX3 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0)
    );
END ENTITY mode_2_6;

ARCHITECTURE behavior OF mode_2_6 IS
    COMPONENT clock_divider
        PORT (
            CLOCK_50 : IN STD_LOGIC;
            reset    : IN STD_LOGIC;
            speed    : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
            clk_out  : OUT STD_LOGIC
        );
    END COMPONENT;

    SIGNAL clk_slow : STD_LOGIC;
    SIGNAL display_index : INTEGER RANGE 0 TO 3 := 0;

    CONSTANT digit_map : ARRAY (0 TO 3) OF STD_LOGIC_VECTOR(6 DOWNTO 0) := (
        "1000000",  -- 0
        "1111001",  -- 1
        "0100100",  -- 2
        "0110000"   -- 3
    );
BEGIN
    -- Instanciation du diviseur de fréquence
    clk_div : clock_divider PORT MAP (
        CLOCK_50 => CLOCK_50,
        reset    => reset,
        speed    => speed,
        clk_out  => clk_slow
    );

    -- Processus pour gérer l'affichage séquentiel
    PROCESS (clk_slow, reset)
    BEGIN
        IF reset = '1' THEN
            display_index <= 0;
            HEX0 <= (OTHERS => '1');
            HEX1 <= (OTHERS => '1');
            HEX2 <= (OTHERS => '1');
            HEX3 <= (OTHERS => '1');
        ELSIF rising_edge(clk_slow) THEN
            HEX0 <= (OTHERS => '1');
            HEX1 <= (OTHERS => '1');
            HEX2 <= (OTHERS => '1');
            HEX3 <= (OTHERS => '1');
            
            CASE display_index IS
                WHEN 0 => HEX0 <= digit_map(0);
                WHEN 1 => HEX1 <= digit_map(1);
                WHEN 2 => HEX2 <= digit_map(2);
                WHEN 3 => HEX3 <= digit_map(3);
                WHEN OTHERS => NULL;
            END CASE;
            
            IF display_index = 3 THEN
                display_index <= 0;
            ELSE
                display_index <= display_index + 1;
            END IF;
        END IF;
    END PROCESS;
END ARCHITECTURE behavior;
